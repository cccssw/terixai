/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package game.graphics;

import game.TerixState;
import game.brick.Brick;
import java.awt.Color;
import java.awt.Graphics;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author wssccc
 */
public class BrickPanel extends javax.swing.JPanel {

    Color[] colorList = new Color[]{Color.WHITE, Color.BLUE, Color.GRAY};
    TerixState gs;

    public void setTs(TerixState ts) {
        this.gs = ts;
    }

    @Override
    public void repaint() {
        super.repaint();
        try {
            Thread.sleep(10);
        } catch (InterruptedException ex) {
            Logger.getLogger(BrickPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    void draw(Graphics g) {
        if (gs == null) {
            return;
        }
        int size1 = getWidth() / gs.getWidth();
        int size2 = getHeight() / gs.getHeight();
        int boxSize = size1 > size2 ? size2 : size1;

        g.setColor(Color.WHITE);
        g.fillRect(0, 0, this.getWidth(), this.getHeight());
        //draw solid bricks
        for (int i = 0; i < gs.getHeight(); ++i) {
            for (int j = 0; j < gs.getWidth(); ++j) {
                int index = gs.get(j, i);
                g.setColor(colorList[index]);
                g.fillRect(j * boxSize, i * boxSize, boxSize, boxSize);
            }
        }
        //draw moving brick
        if (gs.getBrick() != null) {
            int[] bdata = gs.getBrick().getData();
            assert bdata != null;
            for (int i = 0; i < Brick.HEIGHT; ++i) {
                for (int j = 0; j < Brick.WIDTH; ++j) {
                    int index = bdata[i * Brick.WIDTH + j];
                    if (index != 0) {
                        g.setColor(Color.black);
                        g.fillRect((j + gs.getBrickX()) * boxSize, (i + gs.getBrickY()) * boxSize, boxSize, boxSize);
                    }
                }
            }
        }
        //draw lines
        for (int i = 0; i < gs.getWidth(); ++i) {
            g.setColor(Color.BLACK);
            g.drawLine(i * boxSize, 0, i * boxSize, gs.getHeight() * boxSize);
        }

        for (int i = 0; i < gs.getHeight(); ++i) {
            g.setColor(Color.BLACK);
            g.drawLine(0, i * boxSize, gs.getWidth() * boxSize, i * boxSize);
        }
    }

    public BrickPanel() {
        initComponents();
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        draw(g);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
